/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common.js";

export declare namespace IProtocolCoordinator {
  export type MessageSubmissionStruct = {
    messageType: BytesLike;
    target: AddressLike;
    targetChain: BigNumberish;
    payload: BytesLike;
  };

  export type MessageSubmissionStructOutput = [
    messageType: string,
    target: string,
    targetChain: bigint,
    payload: string
  ] & {
    messageType: string;
    target: string;
    targetChain: bigint;
    payload: string;
  };
}

export interface ProtocolCoordinatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "EMERGENCY_ROLE"
      | "MAX_MESSAGE_SIZE"
      | "OPERATOR_ROLE"
      | "baseFee"
      | "cancelMessage"
      | "emergencyCancelMessage"
      | "getMessageResult"
      | "getProtocolConfig"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "messageExists"
      | "messageProcessor"
      | "messageProtocol"
      | "messageRegistry"
      | "messageRouter"
      | "pause"
      | "paused"
      | "quoteMessageFee"
      | "renounceRole"
      | "retryMessage"
      | "revokeRole"
      | "submitMessage"
      | "supportsInterface"
      | "unpause"
      | "updateBaseFee"
      | "updateProtocolComponent"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ComponentUpdated"
      | "FeeUpdated"
      | "MessageProcessingCompleted"
      | "MessageRetryInitiated"
      | "MessageSubmissionInitiated"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMERGENCY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_MESSAGE_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelMessage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyCancelMessage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageResult",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "messageExists",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "messageProcessor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "messageProtocol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "messageRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "messageRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteMessageFee",
    values: [IProtocolCoordinator.MessageSubmissionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "retryMessage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitMessage",
    values: [IProtocolCoordinator.MessageSubmissionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateBaseFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProtocolComponent",
    values: [BytesLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMERGENCY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_MESSAGE_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyCancelMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessageResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "messageExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageProcessor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteMessageFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retryMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateBaseFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProtocolComponent",
    data: BytesLike
  ): Result;
}

export namespace ComponentUpdatedEvent {
  export type InputTuple = [component: BytesLike, newAddress: AddressLike];
  export type OutputTuple = [component: string, newAddress: string];
  export interface OutputObject {
    component: string;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeUpdatedEvent {
  export type InputTuple = [newBaseFee: BigNumberish];
  export type OutputTuple = [newBaseFee: bigint];
  export interface OutputObject {
    newBaseFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageProcessingCompletedEvent {
  export type InputTuple = [messageId: BytesLike];
  export type OutputTuple = [messageId: string];
  export interface OutputObject {
    messageId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageRetryInitiatedEvent {
  export type InputTuple = [messageId: BytesLike];
  export type OutputTuple = [messageId: string];
  export interface OutputObject {
    messageId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageSubmissionInitiatedEvent {
  export type InputTuple = [
    messageId: BytesLike,
    sender: AddressLike,
    messageType: BytesLike,
    target: AddressLike,
    targetChain: BigNumberish
  ];
  export type OutputTuple = [
    messageId: string,
    sender: string,
    messageType: string,
    target: string,
    targetChain: bigint
  ];
  export interface OutputObject {
    messageId: string;
    sender: string;
    messageType: string;
    target: string;
    targetChain: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ProtocolCoordinator extends BaseContract {
  connect(runner?: ContractRunner | null): ProtocolCoordinator;
  waitForDeployment(): Promise<this>;

  interface: ProtocolCoordinatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  EMERGENCY_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_MESSAGE_SIZE: TypedContractMethod<[], [bigint], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  baseFee: TypedContractMethod<[], [bigint], "view">;

  cancelMessage: TypedContractMethod<
    [messageId: BytesLike],
    [boolean],
    "nonpayable"
  >;

  emergencyCancelMessage: TypedContractMethod<
    [messageId: BytesLike],
    [boolean],
    "nonpayable"
  >;

  getMessageResult: TypedContractMethod<
    [messageId: BytesLike],
    [[boolean, string] & { success: boolean; result: string }],
    "view"
  >;

  getProtocolConfig: TypedContractMethod<[], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  messageExists: TypedContractMethod<[messageId: BytesLike], [boolean], "view">;

  messageProcessor: TypedContractMethod<[], [string], "view">;

  messageProtocol: TypedContractMethod<[], [string], "view">;

  messageRegistry: TypedContractMethod<[], [string], "view">;

  messageRouter: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  quoteMessageFee: TypedContractMethod<
    [submission: IProtocolCoordinator.MessageSubmissionStruct],
    [[bigint, bigint] & { _baseFee: bigint; _deliveryFee: bigint }],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  retryMessage: TypedContractMethod<
    [messageId: BytesLike],
    [boolean],
    "payable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  submitMessage: TypedContractMethod<
    [submission: IProtocolCoordinator.MessageSubmissionStruct],
    [string],
    "payable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateBaseFee: TypedContractMethod<
    [newBaseFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateProtocolComponent: TypedContractMethod<
    [component: BytesLike, newAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EMERGENCY_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_MESSAGE_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "baseFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelMessage"
  ): TypedContractMethod<[messageId: BytesLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyCancelMessage"
  ): TypedContractMethod<[messageId: BytesLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "getMessageResult"
  ): TypedContractMethod<
    [messageId: BytesLike],
    [[boolean, string] & { success: boolean; result: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProtocolConfig"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "messageExists"
  ): TypedContractMethod<[messageId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "messageProcessor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "messageProtocol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "messageRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "messageRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "quoteMessageFee"
  ): TypedContractMethod<
    [submission: IProtocolCoordinator.MessageSubmissionStruct],
    [[bigint, bigint] & { _baseFee: bigint; _deliveryFee: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "retryMessage"
  ): TypedContractMethod<[messageId: BytesLike], [boolean], "payable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitMessage"
  ): TypedContractMethod<
    [submission: IProtocolCoordinator.MessageSubmissionStruct],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBaseFee"
  ): TypedContractMethod<[newBaseFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateProtocolComponent"
  ): TypedContractMethod<
    [component: BytesLike, newAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ComponentUpdated"
  ): TypedContractEvent<
    ComponentUpdatedEvent.InputTuple,
    ComponentUpdatedEvent.OutputTuple,
    ComponentUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeeUpdated"
  ): TypedContractEvent<
    FeeUpdatedEvent.InputTuple,
    FeeUpdatedEvent.OutputTuple,
    FeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MessageProcessingCompleted"
  ): TypedContractEvent<
    MessageProcessingCompletedEvent.InputTuple,
    MessageProcessingCompletedEvent.OutputTuple,
    MessageProcessingCompletedEvent.OutputObject
  >;
  getEvent(
    key: "MessageRetryInitiated"
  ): TypedContractEvent<
    MessageRetryInitiatedEvent.InputTuple,
    MessageRetryInitiatedEvent.OutputTuple,
    MessageRetryInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "MessageSubmissionInitiated"
  ): TypedContractEvent<
    MessageSubmissionInitiatedEvent.InputTuple,
    MessageSubmissionInitiatedEvent.OutputTuple,
    MessageSubmissionInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "ComponentUpdated(bytes32,address)": TypedContractEvent<
      ComponentUpdatedEvent.InputTuple,
      ComponentUpdatedEvent.OutputTuple,
      ComponentUpdatedEvent.OutputObject
    >;
    ComponentUpdated: TypedContractEvent<
      ComponentUpdatedEvent.InputTuple,
      ComponentUpdatedEvent.OutputTuple,
      ComponentUpdatedEvent.OutputObject
    >;

    "FeeUpdated(uint256)": TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;
    FeeUpdated: TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;

    "MessageProcessingCompleted(bytes32)": TypedContractEvent<
      MessageProcessingCompletedEvent.InputTuple,
      MessageProcessingCompletedEvent.OutputTuple,
      MessageProcessingCompletedEvent.OutputObject
    >;
    MessageProcessingCompleted: TypedContractEvent<
      MessageProcessingCompletedEvent.InputTuple,
      MessageProcessingCompletedEvent.OutputTuple,
      MessageProcessingCompletedEvent.OutputObject
    >;

    "MessageRetryInitiated(bytes32)": TypedContractEvent<
      MessageRetryInitiatedEvent.InputTuple,
      MessageRetryInitiatedEvent.OutputTuple,
      MessageRetryInitiatedEvent.OutputObject
    >;
    MessageRetryInitiated: TypedContractEvent<
      MessageRetryInitiatedEvent.InputTuple,
      MessageRetryInitiatedEvent.OutputTuple,
      MessageRetryInitiatedEvent.OutputObject
    >;

    "MessageSubmissionInitiated(bytes32,address,bytes32,address,uint16)": TypedContractEvent<
      MessageSubmissionInitiatedEvent.InputTuple,
      MessageSubmissionInitiatedEvent.OutputTuple,
      MessageSubmissionInitiatedEvent.OutputObject
    >;
    MessageSubmissionInitiated: TypedContractEvent<
      MessageSubmissionInitiatedEvent.InputTuple,
      MessageSubmissionInitiatedEvent.OutputTuple,
      MessageSubmissionInitiatedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
